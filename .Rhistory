library("KernSmooth", lib.loc="C:/Program Files/R/R-2.15.3/library")
library("tools", lib.loc="C:/Program Files/R/R-2.15.3/library")
cube <- function(x,n) {
x^3
}
cube(3)
f <- function(x) {
g <- function(y) {
y + z
}
z <- 4
x + g(x)
}
z <- 10
f(3)
x <- 5
y <- if(x <3) {}
y <- if(x < 3) {NA} else {10}
y
x <- 1:10
if(x<5) {x <-0}
x <- matrix(1:16, 4, 4)
x
solve(x)
x <- matrix(rep(1,16), 4, 4)
x
solve(x)
library(datasets)
data(iris)
?iris
summary(iris)
f <- gl(3,50)
x <- split(iris, iris$Species)
sapply(x, colMeans, na.rm=TRUE)
sapply(x, function(x) colmeans(x[, "Sepal.Length"], na.rm=TRUE))
sapply(x, function(x) colMeans(x[, "Sepal.Length"], na.rm=TRUE))
sapply(x, function(x) colMeans(x[, c("Sepal.Length")], na.rm=TRUE))
sapply(x, function(y) colMeans(y[, c("Sepal.Length")], na.rm=TRUE))
x
sapply(x, function(y) mean(y[, c("Sepal.Length")], na.rm=TRUE))
library(datasets)
data(mtcars)
?mtcars
tapply(mtcars$mpg, mtcars$cyl, mean)
tapply(mtcars$hp, mtcars$cyl, mean)
?matrix
setwd("C:/Users/Owner/Rprog/ProgrammingAssignment2")
source("cachematrix.R")
mat <- makeCacheMatrix(1:4, 2, 2)
mat <- makeCacheMatrix(1:4)
mat
source("cachematrix.R")
cacheSolve(1:4)
cacheSolve(1:4, 2,2)
x <- makeCacheMatrix(1:4, 2, 2)
x <- makeCacheMatrix(1:4)
cacheSolve(x)
source("cachematrix.R")
x <- makeCacheMatrix(1:4, 2, 2)
m <- matrix(1:4, 2,2)
test <- makeCacheMatrix(m)
cacheSolve(test)
source("cachematrix.R")
m <- matrix(1:4, 2,2)
class(m)
test <- makeCacheMatrix(m)
cacheSolve(test)
source("cachematrix.R")
m <- matrix(1:4, 2,2)
test <- makeCacheMatrix(m)
cacheSolve(test)
amatrix = makeCacheMatrix(matrix(c(1,2,3,4), nrow=2, ncol=2))
amatrix$get()
cacheSolve(amatrix)
amatrix$getinverse()
source("cachematrix.R")
amatrix = makeCacheMatrix(matrix(c(1,2,3,4), nrow=2, ncol=2))
amatrix$get()
cacheSolve(amatrix)
?solve
source("cachematrix.R")
amatrix = makeCacheMatrix(matrix(c(1,2,3,4), nrow=2, ncol=2))
amatrix$get()
cacheSolve(amatrix)
